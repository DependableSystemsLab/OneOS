//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OneOS.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OneOS.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const Runtime = require(&apos;./Runtime.js&apos;);
        ///
        ///function exec() {
        ///
        ///}
        ///
        ///function fork() {
        ///
        ///}
        ///
        ///function spawn() {
        ///
        ///}
        ///
        ///module.exports = {
        ///    exec: exec,
        ///    fork: fork,
        ///    spawn: spawn
        ///}.
        /// </summary>
        internal static string child_processJs {
            get {
                return ResourceManager.GetString("child_processJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const esprima = require(&apos;esprima&apos;);
        ///const escodegen = require(&apos;escodegen&apos;);
        ///const jsBeautify = require(&apos;js-beautify&apos;).js_beautify;
        ///
        ///// Helpers
        ///const ID_CHARSET = &apos;abcdefghijklmnopqrstuvwxyz&apos;;
        ///function randstr(length = 8) {
        ///    return Array.from({ length: length }, item =&gt; ID_CHARSET[Math.floor(Math.random() * ID_CHARSET.length)]).join(&apos;&apos;);
        ///}
        ///
        ///// These greek letter prefixes are used to prevent conflicting names with user code.
        ///// This is purely based on the assumption that there is a very low prob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CodeJs {
            get {
                return ResourceManager.GetString("CodeJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const Runtime = require(&apos;./Runtime.js&apos;);
        ///
        ///function readFile(path, callback) {
        ///    Runtime.readFile(path).then(data =&gt; {
        ///        callback(null, data);
        ///    }).catch(err =&gt; callback(err));
        ///}
        ///
        ///function writeFile(path, content, callback) {
        ///    Runtime.writeFile(path, content).then(data =&gt; {
        ///        callback(null, data);
        ///    }).catch(err =&gt; callback(err));
        ///}
        ///
        ///function appendFile(path, content, callback) {
        ///    Runtime.appendFile(path, content).then(data =&gt; {
        ///        callback(null, data);
        ///    }).ca [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fsJs {
            get {
                return ResourceManager.GetString("fsJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const Code = require(&apos;./Code.js&apos;);
        ///
        ///module.exports = {
        ///    bootstrap: Code.bootstrap
        ///}.
        /// </summary>
        internal static string indexJs {
            get {
                return ResourceManager.GetString("indexJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (process.argv.length &lt; 6) {
        ///    console.log(&apos;provide input file, output file, agent URI, virtual CWD&apos;);
        ///    process.exit(1);
        ///}
        ///
        ///const inputPath = process.argv[2];
        ///const outputPath = process.argv[3];
        ///const agentUri = process.argv[4];
        ///const agentCwd = process.argv[5];
        ///
        ///const fs = require(&apos;fs&apos;);
        ///const path = require(&apos;path&apos;);
        ///const Code = require(&apos;./Code.js&apos;);
        ///
        ///let source = fs.readFileSync(inputPath, &apos;utf8&apos;);
        ///
        ///let instrumented = Code.instrument(source, {
        ///    uri: agentUri,
        ///    filename: pat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string instrumentJs {
            get {
                return ResourceManager.GetString("instrumentJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const Runtime = require(&apos;./Runtime.js&apos;);
        ///
        ///function createVideoInputStream(path) {
        ///    return Runtime.createVideoInputStream(path);
        ///}
        ///
        ///function createKafkaInputStream(kafkaServer, topic, options) {
        ///    return Runtime.createKafkaInputStream(kafkaServer, topic, options);
        ///}
        ///
        ///module.exports = {
        ///    createVideoInputStream: createVideoInputStream,
        ///    createKafkaInputStream: createKafkaInputStream
        ///}.
        /// </summary>
        internal static string ioJs {
            get {
                return ResourceManager.GetString("ioJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const Runtime = require(&apos;./Runtime.js&apos;);
        ///
        ///function createServer(options, connectionListener) {
        ///    return Runtime.createServer(options, connectionListener);
        ///}
        ///
        ///module.exports = {
        ///    createServer: createServer
        ///}.
        /// </summary>
        internal static string netJs {
            get {
                return ResourceManager.GetString("netJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (process.argv.length &lt; 4) {
        ///    console.log(&apos;provide input file, output file&apos;);
        ///    process.exit(1);
        ///}
        ///
        ///const inputPath = process.argv[2];
        ///const outputPath = process.argv[3];
        ////*const agentUri = process.argv[4];*/
        ///
        ///const fs = require(&apos;fs&apos;);
        ///const path = require(&apos;path&apos;);
        ///const Code = require(&apos;./Code.js&apos;);
        ///
        ///let source = fs.readFileSync(inputPath, &apos;utf8&apos;);
        ///
        ///let restored = Code.restore(JSON.parse(source));
        ///
        ///fs.writeFileSync(outputPath, restored, &apos;utf8&apos;);.
        /// </summary>
        internal static string restoreJs {
            get {
                return ResourceManager.GetString("restoreJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Represents the host Runtime */
        ///const fs = require(&apos;fs&apos;);
        ///const net = require(&apos;net&apos;);
        ///const stream = require(&apos;stream&apos;);
        ///
        ///// Helpers
        ///const ID_CHARSET = &apos;abcdefghijklmnopqrstuvwxyz&apos;;
        ///function randstr(length = 8) {
        ///    return Array.from({ length: length }, item =&gt; ID_CHARSET[Math.floor(Math.random() * ID_CHARSET.length)]).join(&apos;&apos;);
        ///}
        ///
        ///class MessageStream extends stream.Duplex {
        ///    constructor(inputByteStream, outputByteStream) {
        ///        super();
        ///        if (inputByteStream) this.setInputStream [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RuntimeJs {
            get {
                return ResourceManager.GetString("RuntimeJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to body {
        ///    padding: 0;
        ///    margin: 0;
        ///}.
        /// </summary>
        internal static string webTerminalClientCss {
            get {
                return ResourceManager.GetString("webTerminalClientCss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string webTerminalClientDependencyCss {
            get {
                return ResourceManager.GetString("webTerminalClientDependencyCss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string webTerminalClientDependencyJs {
            get {
                return ResourceManager.GetString("webTerminalClientDependencyJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;base href=&quot;/&quot;&gt;
        ///    &lt;meta charset=&quot;utf-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        ///    &lt;title&gt;OneOS Web Terminal&lt;/title&gt;
        ///    &lt;!--&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/fontawesome.css&quot;&gt;
        ///    &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/bulma.css&quot;&gt;
        ///    &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/bulma-timeline.min.css&quot;&gt;--&gt;
        ///    &lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt; --&gt;
        ///    &lt;!-- &lt;script src=&quot;https: [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string webTerminalClientHtml {
            get {
                return ResourceManager.GetString("webTerminalClientHtml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to window.addEventListener(&apos;load&apos;, () =&gt; {
        ///    console.log(&apos;Starting OneOS Web Terminal&apos;);
        ///});.
        /// </summary>
        internal static string webTerminalClientJs {
            get {
                return ResourceManager.GetString("webTerminalClientJs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///* Note:
        ///*   This application runs within the OneOS virtual context
        ///* just like any other JavaScript program running inside OneOS.
        ///* Thus, OneOS will instrument this program prior to execution,
        ///* in order to replace the evaluation context.
        ///* More specifically, the following APIs will be replaced/instrumented:
        ///*   - process
        ///*   - fs, net, child_process modules
        ///* Keeping in mind the above, we can simply treat the OneOS network
        ///* as a localhost machine and serve users accordingly.
        ///* For example, w [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string webTerminalServerJS {
            get {
                return ResourceManager.GetString("webTerminalServerJS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (process.argv.length &lt; 7) {
        ///    console.log(&apos;provide service time (ms), heap branch count, heap depth, node size (bytes), duration (sec)&apos;);
        ///    process.exit(1);
        ///}
        ///
        ///const serviceTime = parseInt(process.argv[2]);
        ///const heapBranches = parseInt(process.argv[3]);
        ///const heapDepth = parseInt(process.argv[4]);
        ///const nodeSize = parseInt(process.argv[5]);
        ///const duration = parseInt(process.argv[6]);
        ///
        ///function fork(branch, depth) {
        ///    let data = Buffer.alloc(nodeSize, Math.random());
        ///    let children = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string workloadJs {
            get {
                return ResourceManager.GetString("workloadJs", resourceCulture);
            }
        }
    }
}
